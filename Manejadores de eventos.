import tkinter as tk
from tkinter import ttk, messagebox

class TodoApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Aplicación de Tareas Pendientes")

        self.tasks = []
        self.task_var = tk.StringVar(value=self.tasks)

        # Campo de entrada para nuevas tareas
        self.new_task_entry = ttk.Entry(root)
        self.new_task_entry.pack(pady=5, padx=10, fill=tk.X)
        self.new_task_entry.bind("<Return>", self.add_task)

        # Botones de acción
        button_frame = ttk.Frame(root)
        button_frame.pack(pady=5)

        self.add_button = ttk.Button(button_frame, text="Añadir Tarea", command=self.add_task)
        self.add_button.pack(side=tk.LEFT, padx=5)

        self.complete_button = ttk.Button(button_frame, text="Completar Tarea", command=self.complete_task)
        self.complete_button.pack(side=tk.LEFT, padx=5)

        self.delete_button = ttk.Button(button_frame, text="Eliminar Tarea", command=self.delete_task)
        self.delete_button.pack(side=tk.LEFT, padx=5)

        # Lista de tareas
        self.task_listbox = tk.Listbox(root, listvariable=self.task_var, selectmode=tk.SINGLE)
        self.task_listbox.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)

        # Atajos de teclado
        self.root.bind("<Escape>", self.close_app)
        self.root.bind("c", self.complete_task_shortcut)
        self.root.bind("<Delete>", self.delete_task_shortcut)
        self.root.bind("d", self.delete_task_shortcut) # Otro atajo para eliminar

        self.update_task_list()

    def add_task(self, event=None):
        new_task = self.new_task_entry.get().strip()
        if new_task:
            self.tasks.append({"text": new_task, "completed": False})
            self.update_task_list()
            self.new_task_entry.delete(0, tk.END)

    def complete_task(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            index = selected_index[0]
            self.tasks[index]["completed"] = not self.tasks[index]["completed"]
            self.update_task_list()

    def complete_task_shortcut(self, event):
        self.complete_task()

    def delete_task(self):
        selected_index = self.task_listbox.curselection()
        if selected_index:
            index = selected_index[0]
            del self.tasks[index]
            self.update_task_list()

    def delete_task_shortcut(self, event):
        self.delete_task()

    def update_task_list(self):
        styled_tasks = []
        for task in self.tasks:
            if task["completed"]:
                styled_tasks.append(f"[Completada] {task['text']}")
            else:
                styled_tasks.append(task["text"])
        self.task_var.set(styled_tasks)
        self._apply_listbox_styles()

    def _apply_listbox_styles(self):
        self.task_listbox.tag_delete("completed")
        self.task_listbox.tag_config("completed", foreground="gray", strikethrough=True)
        self.task_listbox.tag_delete("pending")
        self.task_listbox.tag_config("pending", foreground="black")

        self.task_listbox.delete(0, tk.END)
        for i, task in enumerate(self.tasks):
            if task["completed"]:
                self.task_listbox.insert(tk.END, f"[Completada] {task['text']}", "completed")
            else:
                self.task_listbox.insert(tk.END, task["text"], "pending")

    def close_app(self, event=None):
        self.root.destroy()

if _name_ == "_main_":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()
